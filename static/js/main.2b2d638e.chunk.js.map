{"version":3,"sources":["serviceWorker.js","components/counter.jsx","components/counters.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Counter","className","this","styyliChangee","formatCount","onClick","props","onIncrement","counter","onDelete","id","classes","value","Component","Counters","state","counters","handleIncrement","index","indexOf","setState","handleReset","map","c","handleDelete","counterId","filter","key","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8CCYSC,G,6KAzBH,IAAD,OACP,OAEI,yBAAKC,UAAU,UACb,0BAAMA,UAAWC,KAAKC,iBAAtB,IAAyCD,KAAKE,eAC9C,4BAAQC,QAAU,kBAAM,EAAKC,MAAMC,YAAY,EAAKD,MAAME,WAA1D,SAEA,4BAAQH,QAAW,kBAAM,EAAKC,MAAMG,SAAS,EAAKH,MAAME,QAAQE,KAC9DT,UAAU,gBADZ,U,sCAON,IAAIU,EAAU,SAEd,OADAA,GAAyC,IAA9BT,KAAKI,MAAME,QAAQI,MAAe,GAAK,W,oCAIrC,IACNA,EAASV,KAAKI,MAAME,QAApBI,MACP,OAAiB,IAAVA,EAAc,IAAMA,M,GAvBTC,cCyDPC,E,4MAxDbC,MAAQ,CACNC,SAAS,CACP,CAACN,GAAG,EAAGE,MAAO,GACd,CAACF,GAAG,EAAGE,MAAO,GACd,CAACF,GAAG,EAAGE,MAAO,GACd,CAACF,GAAG,EAAGE,MAAO,K,EAKpBK,gBAAkB,SAAAT,GAChB,IAAMQ,EAAQ,YAAM,EAAKD,MAAMC,UACzBE,EAAQF,EAASG,QAAQX,GAC/BQ,EAASE,GAAT,eAAuBV,GACvBQ,EAASE,GAAON,QAChB,EAAKQ,SAAS,CAACJ,c,EAGjBK,YAAc,WACZ,IAAML,EAAW,EAAKD,MAAMC,SAASM,KAAK,SAAAC,GAE1C,OADAA,EAAEX,MAAQ,EACHW,KAEP,EAAKH,SAAU,CAACJ,c,EAGlBQ,aAAe,SAAAC,GACf,IAAMT,EAAW,EAAKD,MAAMC,SAASU,QAAO,SAAAH,GAAC,OAAIA,EAAEb,KAAOe,KAC1D,EAAKL,SAAS,CAACJ,c,uDAIH,IAAD,OACP,OACE,6BACE,4BACAX,QAASH,KAAKmB,YACdpB,UAAU,SAFV,UAGA,0BAAMA,UAAU,WAAhB,cACCC,KAAKa,MAAMC,SAASM,KAAI,SAAAd,GAAO,OAC9B,kBAAC,EAAD,CACEmB,IAAKnB,EAAQE,GACbD,SAAU,EAAKe,aACfjB,YAAe,EAAKU,gBAEpBT,QAAWA,OAXjB,S,GAnCiBK,aCIvBe,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAIFC,SAASC,eAAe,SHsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2b2d638e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\nimport './styyli.css';\r\n\r\nclass Counter extends Component {\r\n\r\n  render() {   \r\n    return (\r\n\r\n        <div className=\"wrappi\">\r\n          <span className={this.styyliChangee()}> {this.formatCount()}</span> \r\n          <button onClick={ () => this.props.onIncrement(this.props.counter) } \r\n          > more</button>\r\n          <button onClick= { () => this.props.onDelete(this.props.counter.id)\r\n          } className=\"deleteButton\">DEL</button>\r\n        </div> \r\n    );    \r\n  }\r\n\r\n  styyliChangee() {   \r\n    let classes = \"spanni\";\r\n    classes += this.props.counter.value  === 0 ? \"\" : \"Tiukka\";\r\n    return classes ;\r\n  }\r\n\r\n  formatCount() {\r\n    const {value} = this.props.counter;\r\n    return value === 0 ? '0' : value;\r\n  }\r\n}\r\n \r\nexport default Counter;","import React, { Component } from 'react';\r\nimport Counter from \"./counter.jsx\";\r\n\r\nclass Counters extends Component {\r\n  state = {\r\n    counters:[\r\n      {id:1, value: 5},\r\n      {id:2, value: 0},\r\n      {id:3, value: 0},\r\n      {id:4, value: 0}\r\n    ]  \r\n    };\r\n\r\n\r\nhandleIncrement = counter => {\r\n  const counters =[...this.state.counters];\r\n  const index = counters.indexOf(counter);\r\n  counters[index] = { ...counter};\r\n  counters[index].value++;\r\n  this.setState({counters});\r\n}\r\n\r\nhandleReset = () => {\r\n  const counters = this.state.counters.map (c => {\r\n  c.value = 0;\r\n  return c;\r\n  });\r\n  this.setState( {counters});\r\n}\r\n\r\nhandleDelete = counterId =>  {\r\nconst counters = this.state.counters.filter(c => c.id !== counterId);\r\nthis.setState({counters}); \r\n};\r\n\r\n\r\n  render() {  \r\n    return ( \r\n      <div>\r\n        <button\r\n        onClick={this.handleReset}\r\n        className=\"reset\">RESET </button>\r\n        <span className=\"topSpan\">React2gh-p</span>\r\n        {this.state.counters.map(counter => ( \r\n          <Counter \r\n            key={counter.id} \r\n            onDelete={this.handleDelete}\r\n            onIncrement = {this.handleIncrement} \r\n            //svalue={counter.value}\r\n            counter = {counter}\r\n          />\r\n         ))\r\n         };\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n \r\nexport default Counters;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport  Counters from './components/counters.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Counters />\n    \n  </React.StrictMode>,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}