{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","components/main.jsx","serviceWorker.js","index.js"],"names":["navbar","className","this","props","totalCounters","Component","Counter","console","log","styyliChangee","formatCount","onClick","onIncrement","counter","onDelete","id","classes","value","Counters","state","counters","handleIncrement","index","indexOf","setState","handleReset","map","c","handleDelete","counterId","filter","onReset","window","location","reload","key","App","Fragment","length","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e5d06445.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass navbar  extends Component {\r\n  render() { \r\n    return (  \r\n\r\n      <nav className=\"navbar\">\r\n        <span className=\"navbarSpan\">\r\n        <span className=\"topSpan\">React2gh-pages<br /></span>\r\n\r\n         Counters: {this.props.totalCounters} \r\n        </span>\r\n        \r\n      </nav>\r\n\r\n    ); // end return\r\n  }\r\n}\r\n \r\n\r\nexport default navbar;","import React, { Component } from 'react';\r\nimport './styyli.css';\r\n\r\nclass Counter extends Component {\r\n\r\n    componentDidUpdate(){\r\n      console.log(\"app - componentDidUpdate\");\r\n    }\r\n  render() {   \r\n    return (\r\n\r\n        <div className=\"wrappi\">\r\n          <div className={this.styyliChangee()}> {this.formatCount()}</div> \r\n          <button onClick={ () => this.props.onIncrement(this.props.counter) } \r\n          > ADD</button>\r\n          <button onClick= { () => this.props.onDelete(this.props.counter.id)\r\n          } className=\"deleteButton\">DEL</button>\r\n        </div> \r\n    );    \r\n  }\r\n\r\n  styyliChangee() {   \r\n    let classes = \"number\";\r\n    classes += this.props.counter.value  === 0 ? \"\" : \"Changed\";\r\n    return classes ;\r\n  }\r\n\r\n  formatCount() {\r\n    const {value} = this.props.counter;\r\n    return value === 0 ? '0' : value;\r\n  }\r\n}\r\n \r\nexport default Counter;","import React, { Component } from 'react';\r\nimport Counter from \"./counter.jsx\";\r\n\r\nfunction refreshPage() {\r\n  window.location.reload(false);\r\n}\r\n\r\nclass Counters extends Component {\r\n  state = {\r\n    counters:[\r\n      {id:1, value: 5},\r\n      {id:2, value: 0},\r\n      {id:3, value: 0},\r\n      {id:4, value: 0}\r\n    ]  \r\n    };\r\n\r\n\r\nhandleIncrement = counter => {\r\n  const counters =[...this.state.counters];\r\n  const index = counters.indexOf(counter);\r\n  counters[index] = { ...counter};\r\n  counters[index].value++;\r\n  this.setState({counters});\r\n}\r\n\r\nhandleReset = () => {\r\n  const counters = this.state.counters.map (c => {\r\n  c.value = 0;\r\n  return c;\r\n  });\r\n  this.setState( {counters});\r\n}\r\n\r\nhandleDelete = counterId =>  {\r\nconst counters = this.state.counters.filter(c => c.id !== counterId);\r\nthis.setState({counters}); \r\n};\r\n\r\n  render() {  \r\n    return (\r\n       \r\n      <div>\r\n        <div className=\"resetReload\">\r\n        <button onClick={this.props.onReset} className=\"resetReloadButton\"> RESET </button>\r\n        <button onClick={ () => window.location.reload(false)} className=\"resetReloadButton\"> RELOAD </button>\r\n        </div>\r\n\r\n\r\n        {this.props.counters.map(counter => ( \r\n          <Counter \r\n            key={counter.id} \r\n            onDelete={this.props.onDelete}\r\n            onIncrement = {this.props.onIncrement} \r\n            //svalue={counter.value}\r\n            counter = {counter}\r\n          />\r\n         ))\r\n         };\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n \r\nexport default Counters;","import React from 'react';\nimport './App.css';\nimport Navbar from './components/navbar.jsx';\nimport  Counters from './components/counters.jsx';\nimport main from './components/main.jsx';\n// import Counter from './components/counter';\n// import { render } from '@testing-library/react';\nimport { Component } from 'react';\n\nclass App extends Component {\n  state = {\n    counters:[\n      {id:1, value: 5},\n      {id:2, value: 0},\n      {id:3, value: 0},\n      {id:4, value: 0}\n    ]  \n    };\nconstructor(){\n  super();\n  console.log(\"App - Contructor\");\n}\ncomponentDidMount(){\n  console.log(\"App - componentDidMount\");\n}\n\nhandleIncrement = counter => {\n  const counters =[...this.state.counters];\n  const index = counters.indexOf(counter);\n  counters[index] = { ...counter};\n  counters[index].value++;\n  this.setState({counters});\n\n}\n\nhandleReset = () => {\n  const counters = this.state.counters.map (c => {\n  c.value = 0;\n  return c;\n  });\n  this.setState( {counters});\n}\n\nhandleDelete = counterId =>  {\nconst counters = this.state.counters.filter(c => c.id !== counterId);\nthis.setState({counters}); \n};\n\nrender(){  \n  console.log(\"App - Render\");\n  return (\n    <React.Fragment>\n    <Navbar totalCounters={this.state.counters.filter(c => c.value > 0).length}   />\n    <main className=\"main\"> \n    <Counters\n      counters={this.state.counters}\n       onReset={this.handleReset}\n       onIncrement={this.handleIncrement}\n       onDelete={this.handleDelete} \n     />\n    </main>\n    </React.Fragment>\n\n\n  );\n}\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\n\r\nclass main extends Component {\r\n  render() { \r\n    return (\r\n      <div className=\"main\">\r\n        <p>main </p>\r\n      </div>\r\n      );\r\n  }\r\n}\r\n \r\nexport default main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    \n    <App />\n    \n  </React.StrictMode>,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}